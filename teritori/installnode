#!/bin/bash

while true
do

# Logo

echo "============================================================"
curl -s https://raw.githubusercontent.com/AlekseyMoskalev1/script/main/Noders.sh | bash
echo "============================================================"


PS3='Select an action: '
options=(
"Prepare the server for installation" 
"Install TERITORI Node" 
"Create wallet"
"Log Node" 
"Check node status" 
"Request for tokens in Discord" 
"Balance" 
"Create validator" 
"Check validator"
"Parametrs"  
"Exit")
select opt in "${options[@]}"
               do
                   case $opt in
                   
"Prepare the server for installation")
echo "============================================================"
echo "Preparation has begun"
echo "============================================================"

#INSTALL DEPEND
echo "============================================================"
echo "Update and install APT"
echo "============================================================"
sleep 3
sudo apt update && sudo apt upgrade -y && \
sudo apt install curl tar wget clang pkg-config libssl-dev jq build-essential bsdmainutils git make ncdu gcc git jq chrony liblz4-tool -y

#INSTALL GO
echo "============================================================"
echo "Install GO 1.18.1"
echo "============================================================"
sleep 3
wget https://golang.org/dl/go1.18.1.linux-amd64.tar.gz; \
rm -rv /usr/local/go; \
tar -C /usr/local -xzf go1.18.1.linux-amd64.tar.gz && \
rm -v go1.18.1.linux-amd64.tar.gz && \
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> ~/.bash_profile && \
source ~/.bash_profile && \
go version > /dev/null

echo "============================================================"
echo "The server is ready!"
echo "============================================================"
break
;;
            
"Install TERITORI Node")
echo "============================================================"
echo "Set parameters"
echo "============================================================"
echo "Enter NodName:"
echo "============================================================"
                
read TERITRINODE
TERITRINODE=$TERITRINODE
echo 'export TERITRINODE='${TERITRINODE} >> $HOME/.bash_profile

echo "============================================================"
echo "Enter WalletName:"
echo "============================================================"
               
read TERITORIWALLET
TERITORIWALLET=$TERITORIWALLET
echo 'export TERITORIWALLET='${ARCHWAYWALLET} >> $HOME/.bash_profile
TERITORICHAIN=""teritori-testnet-v2""
echo 'export TERITORICHAIN='${TERITORICHAIN} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Installation started"
echo "============================================================"

git clone https://github.com/TERITORI/teritori-chain
cd teritori-chain
git checkout teritori-testnet-v2
make install

teritorid init $TERITRINODE --chain-id $TERITORICHAIN

teritorid tendermint unsafe-reset-all --home $HOME/.teritorid
rm $HOME/.teritorid/config/genesis.json
cp $HOME/teritori-chain/genesis/genesis.json $HOME/.teritorid/config/genesis.json

SEEDS=""
PEERS="0b42fd287d3bb0a20230e30d54b4b8facc412c53@176.9.149.15:26656,2f394edda96be07bf92b0b503d8be13d1b9cc39f@5.9.40.222:26656,8ce81af6b4acee9688b9b3895fc936370321c0a3@78.46.106.69:26656"; \
sed -i.bak -e "s/^seeds *=.*/seeds = \"$SEEDS\"/; s/^persistent_peers *=.*/persistent_peers = \"$PEERS\"/" $HOME/.teritorid/config/config.toml

# config pruning
indexer="null"
pruning="custom"
pruning_keep_recent="100"
pruning_keep_every="0"
pruning_interval="10"

sed -i -e "s/^indexer *=.*/indexer = \"$indexer\"/" $HOME/.teritorid/config/config.toml
sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" $HOME/.teritorid/config/app.toml
sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" $HOME/.teritorid/config/app.toml
sed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \"$pruning_keep_every\"/" $HOME/.teritorid/config/app.toml
sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" $HOME/.teritorid/config/app.toml



tee $HOME/teritorid.service > /dev/null <<EOF
[Unit]
Description=teritori
After=network.target
[Service]
Type=simple
User=$USER
ExecStart=$(which teritorid) start
Restart=on-failure
RestartSec=10
LimitNOFILE=65535
[Install]
WantedBy=multi-user.target
EOF

sudo mv $HOME/teritorid.service /etc/systemd/system/

# start service
sudo systemctl daemon-reload
sudo systemctl enable teritorid
sudo systemctl restart teritorid

echo "============================================================"
echo "Installation complete!"
echo "============================================================"
break
;;

"Create wallet")
echo "============================================================"
echo "Save mnemonic!"
echo "============================================================"
               
teritorid keys add $TERITORIWALLET
TERITORIADDRWALL=$(teritorid keys show $TERITORIWALLET -a)
TERITORIVAL=$(teritorid keys show $TERITORIWALLET --bech val -a)
echo 'export TERITORIVAL='${TERITORIVAL} >> $HOME/.bash_profile
echo 'export TERITORIADDRWALL='${TERITORIADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Wallet addres: $TERITORIADDRWALL"
echo "Valoper addres: $TERITORIVAL"
echo "============================================================"
               
break
;;

"Check node status")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "============================================================"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "Block height = $(teritorid status 2>&1 | jq ."SyncInfo"."latest_block_height")"
echo "Skipped Blocks and Validator Creation Block $(teritorid q slashing signing-info $(teritorid tendermint show-validator))"
echo "============================================================"
break
;;

"Create validator")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "============================================================"
               
teritorid tx staking create-validator \
  --amount 1000000muon \
  --from $TERITORIWALLET \
  --commission-max-change-rate "0.05" \
  --commission-max-rate "0.20" \
  --commission-rate "0.05" \
  --min-self-delegation "1" \
  --pubkey $(teritorid tendermint show-validator) \
  --moniker $TERITRINODE \
  --chain-id $TERITORICHAIN \
  --gas 300000 \
  -y
break
;;

"Parametrs and balance")
echo "============================================================"
echo "Your parameters"
echo "============================================================"
echo "Name Node: $TERITRINODE"
echo "Address: $TERITORIADDRWALL" 
echo "Your balance: $(teritorid query bank balances $TERITORIADDRWALL)"
echo "============================================================"
break
;;

"Check validator") 
echo "============================================================"
echo "Account request: $(teritorid q auth account $(teritorid keys show $TERITORIWALL -a) -o text)"
echo "Validator info: $(teritorid q staking validator $TERITORIVAL)"
echo "============================================================"
break
;;

"Request for tokens in Discord")
echo "============================================================"
echo "To request tokens, you need to go to the Discord server in the
fauccet channel and request tokens.
Server in Discord - hhttps://discord.gg/krXFmeqd"
echo "============================================================"
echo "Copy and paste this \033[32m !faucet ${TERITORIADDRWALL} \033[37m"
echo "============================================================"
break
;;

"Log Node")
journalctl -u teritorid -f -o cat
break
;;

"Delete node")
systemctl stop teritorid
systemctl disable teritorid
rm /etc/systemd/system/teritorid.service
rm -r .teritorid teritorid
break
;;

"Exit")
exit
;;

*) echo "invalid option $REPLY";;
esac
done
done
