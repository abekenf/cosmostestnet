#!/bin/bash

while true
do

# Logo
source ~/.bash_profile

echo "============================================================"
curl -s https://raw.githubusercontent.com/AlekseyMoskalev1/script/main/Noders.sh | bash
echo "============================================================"


PS3='Select an action: '
options=(
"Prepare the server for installation" 
"Install HAQQ Node" 
"Create wallet"
"Recover wallet"
"Log Node" 
"Check node status" 
"Request for tokens in Discord" 
"Parametrs and balance" 
"Create validator" 
"Check validator"
"Exit")
select opt in "${options[@]}"
               do
                   case $opt in
                   
"Prepare the server for installation")
echo "============================================================"
echo "Preparation has begun"
echo "============================================================"

#INSTALL DEPEND
echo "============================================================"
echo "Update and install APT"
echo "============================================================"
sleep 3
sudo apt update && sudo apt upgrade -y && \
sudo apt install curl tar wget clang pkg-config libssl-dev libleveldb-dev jq build-essential bsdmainutils git make ncdu htop screen unzip bc fail2ban htop -y

#INSTALL GO
echo "============================================================"
echo "Install GO 1.18.3"
echo "============================================================"
sleep 3
cd $HOME && \
ver="1.18.3" && \
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" && \
sudo rm -rf /usr/local/go && \
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" && \
rm "go$ver.linux-amd64.tar.gz" && \
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile && \
source $HOME/.bash_profile

echo "============================================================"
echo "The server is ready!"
echo "============================================================"
break
;;
            
"Install HAQQ Node")
echo "============================================================"
echo "Set parameters"
echo "============================================================"
echo "Enter NodName:"
echo "============================================================"
                
read HAQQNODE
HAQQNODE=$HAQQNODE
echo 'export HAQQNODE='${HAQQNODE} >> $HOME/.bash_profile

echo "============================================================"
echo "Enter WalletName:"
echo "============================================================"
               
read HAQQWALLET
HAQQWALLET=$HAQQWALLET
echo 'export HAQQWALLET='${HAQQWALLET} >> $HOME/.bash_profile
HAQQCHAIN=""haqq_53211-1""
echo 'export HAQQCHAIN='${HAQQCHAIN} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Installation started"
echo "============================================================"
git clone -b v1.0.3 https://github.com/haqq-network/haqq haqq && \
cd haqq && \
make install && \
haqqd version

haqqd init $HAQQNODE --chain-id $HAQQCHAIN

haqqd tendermint unsafe-reset-all --home $HOME/.haqqd
rm $HOME/.haqqd/config/genesis.json
wget -O $HOME/.haqqd/config/genesis.json "https://storage.googleapis.com/haqq-testedge-snapshots/genesis.json"

SEEDS="8f7b0add0523ec3648cb48bc12ac35357b1a73ae@195.201.123.87:26656,899eb370da6930cf0bfe01478c82548bb7c71460@34.90.233.163:26656,f2a78c20d5bb567dd05d525b76324a45b5b7aa28@34.90.227.10:26656,4705cf12fb56d7f9eb7144937c9f1b1d8c7b6a4a@34.91.195.139:26656"
PEERS=""; \
sed -i.bak -e "s/^seeds *=.*/seeds = \"$SEEDS\"/; s/^persistent_peers *=.*/persistent_peers = \"$PEERS\"/" $HOME/.haqqd/config/config.toml


# config pruning
indexer="null"
pruning="custom"
pruning_keep_recent="100"
pruning_keep_every="0"
pruning_interval="10"

sed -i -e "s/^indexer *=.*/indexer = \"$indexer\"/" $HOME/.haqqd/config/config.toml
sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" $HOME/.haqqd/config/app.toml
sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" $HOME/.haqqd/config/app.toml
sed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \"$pruning_keep_every\"/" $HOME/.haqqd/config/app.toml
sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" $HOME/.haqqd/config/app.toml



tee $HOME/haqqd.service > /dev/null <<EOF
[Unit]
Description=haqq
After=network.target
[Service]
Type=simple
User=$USER
ExecStart=$(which haqqd) start
Restart=on-failure
RestartSec=10
LimitNOFILE=65535
[Install]
WantedBy=multi-user.target
EOF

sudo mv $HOME/haqqd.service /etc/systemd/system/

# start service
sudo systemctl daemon-reload
sudo systemctl enable haqqd
sudo systemctl restart haqqd

echo "============================================================"
echo "Installation complete!"
echo "============================================================"
break
;;

"Recover wallet")

haqqd keys add $HAQQEWALLET --recover
HAQQADDRWALL=$(haqqd keys show $HAQQWALLET -a)
HAQQVAL=$(haqqd keys show $HAQQWALLET --bech val -a)
echo 'export HAQQVAL='${HAQQVAL} >> $HOME/.bash_profile
echo 'export HAQQADDRWALL='${HAQQADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Wallet addres: $HAQQADDRWALL"
echo "Valoper addres: $HAQQVAL"
echo "============================================================"

break
;;

"Create wallet")
echo "============================================================"
echo "Save mnemonic!"
echo "============================================================"
               
haqqd keys add $HAQQEWALLET
HAQQADDRWALL=$(haqqd keys show $HAQQWALLET -a)
HAQQVAL=$(haqqd keys show $HAQQWALLET --bech val -a)
echo 'export HAQQVAL='${HAQQVAL} >> $HOME/.bash_profile
echo 'export HAQQADDRWALL='${HAQQADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Wallet addres: $HAQQADDRWALL"
echo "Valoper addres: $HAQQVAL"
echo "============================================================"
               
break
;;

"Check node status")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "============================================================"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "Block height = $(haqqd status 2>&1 | jq ."SyncInfo"."latest_block_height")"
echo "Skipped Blocks and Validator Creation Block $(haqqd q slashing signing-info $(haqqd tendermint show-validator))"
echo "============================================================"
break
;;

"Create validator")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "============================================================"
               
haqqd tx staking create-validator \
  --amount 1000000000000000000aISLM \
  --from $HAQQWALLET \
  --commission-max-change-rate "0.05" \
  --commission-max-rate "0.20" \
  --commission-rate "0.05" \
  --min-self-delegation "1" \
  --pubkey $(haqqd tendermint show-validator) \
  --moniker $HAQQNODE \
  --chain-id $HAQQCHAIN \
  --gas 300000 \
  -y
break
;;

"Parametrs and balance")
echo "============================================================"
echo "Your parameters"
echo "============================================================"
echo "Name Node: $HAQQNODE"
echo "Address: $HAQQADDRWALL" 
echo "Your balance: $(haqqd query bank balances $HAQQADDRWALL)"
echo "============================================================"
break
;;

"Check validator") 
echo "============================================================"
echo "Account request: $(haqqd q auth account $(haqqd keys show $HAQQADDRWALL -a) -o text)"
echo "Validator info: $(haqqd q staking validator $HAQQVAL)"
echo "============================================================"
break
;;

"Request for tokens in Discord")
echo "============================================================"
echo "In order to request tokens - you need to take the received address and import it into a metamask and connect to this site https://testedge.haqq.network/"
echo "============================================================"
echo -e "Copy and paste this $(haqqd keys export $HAQQWALLET --unarmored-hex --unsafe)"
echo "============================================================"
break
;;

"Log Node")
journalctl -u haqqd -f -o cat
break
;;

"Delete node")
systemctl stop haqqd
systemctl disable haqqd
rm /etc/systemd/system/haqqd.service
rm -rf .haqqd haqq
break
;;

"Exit")
exit
;;

*) echo "invalid option $REPLY";;
esac
done
done
