#!/bin/bash

while true
do

# Logo
source ~/.bash_profile

echo "============================================================"
curl -s https://raw.githubusercontent.com/AlekseyMoskalev1/script/main/Noders.sh | bash
echo "============================================================"


PS3='Select an action: '
options=(
"Prepare the server for installation" 
"Install CROWD Node" 
"Create wallet"
"Recover wallet"
"Log Node" 
"Check node status" 
"Request for tokens in Discord" 
"Parametrs and balance" 
"Create validator" 
"Check validator"
"Exit")
select opt in "${options[@]}"
               do
                   case $opt in
                   
"Prepare the server for installation")
echo "============================================================"
echo "Preparation has begun"
echo "============================================================"

#INSTALL DEPEND
echo "============================================================"
echo "Update and install APT"
echo "============================================================"
sleep 3
sudo apt update && sudo apt upgrade -y && \
sudo apt install curl tar wget clang pkg-config libssl-dev jq build-essential bsdmainutils git make ncdu gcc git jq chrony liblz4-tool -y

#INSTALL GO
echo "============================================================"
echo "Install GO 1.18.1"
echo "============================================================"
sleep 3
wget https://golang.org/dl/go1.18.1.linux-amd64.tar.gz; \
rm -rv /usr/local/go; \
tar -C /usr/local -xzf go1.18.1.linux-amd64.tar.gz && \
rm -v go1.18.1.linux-amd64.tar.gz && \
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> ~/.bash_profile && \
source ~/.bash_profile && \
go version > /dev/null

echo "============================================================"
echo "The server is ready!"
echo "============================================================"
break
;;
            
"Install CROWD Node")
echo "============================================================"
echo "Set parameters"
echo "============================================================"
echo "Enter NodName:"
echo "============================================================"
                
read CROWDNODE
CROWDNODE=$CROWDNODE
echo 'export CROWDNODE='${CROWDNODE} >> $HOME/.bash_profile

echo "============================================================"
echo "Enter WalletName:"
echo "============================================================"
               
read CROWDWALLET
CROWDWALLET=$CROWDWALLET
echo 'export CROWDWALLET='${CROWDWALLET} >> $HOME/.bash_profile
CROWDCHAIN=""Cardchain""
echo 'export CROWDCHAIN='${CROWDCHAIN} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Installation started"
echo "============================================================"
mkdir /usr/local/bin/
wget https://github.com/DecentralCardGame/Cardchain/releases/download/latest/Cardchain_latest_linux_amd64.tar.gz
tar -xvzf Cardchain_latest_linux_amd64.tar.gz
mv Cardchaind /usr/local/bin/
cardchain version

cardchain init $CROWDNODE --chain-id $CROWDCHAIN

cardchain tendermint unsafe-reset-all --home $HOME/.Cardchain
rm $HOME/.Cardchain/config/genesis.json
wget -O $HOME/.Cardchain/config/genesis.json https://raw.githubusercontent.com/DecentralCardGame/Testnet1/main/genesis.json

SEEDS=""
PEERS="61f05a01167b1aec59275f74c3d7c3dc7e9388d4@45.136.28.158:26658"; \
sed -i.bak -e "s/^seeds *=.*/seeds = \"$SEEDS\"/; s/^persistent_peers *=.*/persistent_peers = \"$PEERS\"/" $HOME/.Cardchain/config/config.toml

# config pruning
indexer="null"
pruning="custom"
pruning_keep_recent="100"
pruning_keep_every="0"
pruning_interval="10"

sed -i -e "s/^indexer *=.*/indexer = \"$indexer\"/" $HOME/.Cardchain/config/config.toml
sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" $HOME/.Cardchain/config/app.toml
sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" $HOME/.Cardchain/config/app.toml
sed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \"$pruning_keep_every\"/" $HOME/.Cardchain/config/app.toml
sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" $HOME/.Cardchain/config/app.toml



tee $HOME/cardchain.service > /dev/null <<EOF
[Unit]
Description=stride
After=network.target
[Service]
Type=simple
User=$USER
ExecStart=$(which cardchain) start
Restart=on-failure
RestartSec=10
LimitNOFILE=65535
[Install]
WantedBy=multi-user.target
EOF

sudo mv $HOME/cardchain.service /etc/systemd/system/

# start service
sudo systemctl daemon-reload
sudo systemctl enable cardchain
sudo systemctl restart cardchain

echo "============================================================"
echo "Installation complete!"
echo "============================================================"
break
;;

"Recover wallet")

cardchain keys add $CROWDWALLET --recover
CROWDADDRWALL=$(cardchain keys show $CROWDWALLET -a)
CROWDVAL=$(cardchain keys show $CROWDWALLET --bech val -a)
echo 'export CROWDVAL='${CROWDVAL} >> $HOME/.bash_profile
echo 'export CROWDADDRWALL='${CROWDADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Wallet addres: $STRIDEADDRWALL"
echo "Valoper addres: $STRIDEVAL"
echo "============================================================"

break
;;

"Create wallet")
echo "============================================================"
echo "Save mnemonic!"
echo "============================================================"
               
cardchain keys add $CROWDWALLET
CROWDADDRWALL=$(cardchain keys show $CROWDWALLET -a)
CROWDVAL=$(cardchain keys show $CROWDWALLET --bech val -a)
echo 'export CROWDVAL='${CROWDVAL} >> $HOME/.bash_profile
echo 'export CROWDADDRWALL='${CROWDADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Wallet addres: $CROWDADDRWALL"
echo "Valoper addres: $CROWDVAL"
echo "============================================================"
               
break
;;

"Check node status")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "============================================================"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "Block height = $(cardchain status 2>&1 | jq ."SyncInfo"."latest_block_height")"
echo "Skipped Blocks and Validator Creation Block $(cardchain q slashing signing-info $(cardchain tendermint show-validator))"
echo "============================================================"
break
;;

"Create validator")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "============================================================"
               
cardchain tx staking create-validator \
  --amount 1000000ustrd \
  --from $CROWDWALLET \
  --commission-max-change-rate "0.05" \
  --commission-max-rate "0.20" \
  --commission-rate "0.05" \
  --min-self-delegation "1" \
  --pubkey $(cardchain tendermint show-validator) \
  --moniker $CROWDNODE \
  --chain-id $CROWDCHAIN \
  --gas 300000 \
  -y
break
;;

"Parametrs and balance")
echo "============================================================"
echo "Your parameters"
echo "============================================================"
echo "Name Node: $CROWDNODE"
echo "Address: $CROWDADDRWALL" 
echo "Your balance: $(cardchain query bank balances $CROWDADDRWALL)"
echo "============================================================"
break
;;

"Check validator") 
echo "============================================================"
echo "Account request: $(cardchain q auth account $(cardchain keys show $CROWDADDRWALL -a) -o text)"
echo "Validator info: $(cardchain q staking validator $CROWDVAL)"
echo "============================================================"
break
;;

"Request for tokens in Discord")
echo "============================================================"
echo "To request tokens, you need to go to the Discord server in the
fauccet channel and request tokens.
Server in Discord - https://discord.gg/cJ6atg5s"
echo "============================================================"
echo -e "Copy and paste this \033[32m \Send me your $CROWDADDRWALL in TG https://t.me/nodersteam \033[37m"
echo "============================================================"
break
;;

"Log Node")
journalctl -u cardchain -f -o cat
break
;;

"Delete node")
systemctl stop cardchain
systemctl disable cardchain
rm /etc/systemd/system/cardchain.service
rm -r .Cardchain
break
;;

"Exit")
exit
;;

*) echo "invalid option $REPLY";;
esac
done
done
